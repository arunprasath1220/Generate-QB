unit,topic,mark,question,answer,option_a,option_b,option_c,option_d,cognitive_dimension,knowledge_dimension,portion,figure
Unit 1,Data Types,1,Which of the following is NOT a primitive data type in JavaScript?,Class,Number,String,Boolean,Class,Remember,Factual,A,
Unit 2,Functions,2,Explain the difference between function declaration and function expression in JavaScript.,Function declarations are hoisted while function expressions are not. Function declarations use the 'function' keyword followed by a name while function expressions assign an anonymous function to a variable.,,,,,Understand,Conceptual,A,
Unit 3,Arrays,3,Describe three methods for iterating through arrays in JavaScript and their use cases.,"1. forEach(): Simple iteration without returning values\n2. map(): Creates a new array with results of calling a function on every element\n3. filter(): Creates a new array with elements that pass a test function",,,,,Apply,Procedural,B,
Unit 4,DOM Manipulation,4,Explain event delegation in JavaScript and provide an example of when it would be beneficial.,"Event delegation is a technique where you attach an event listener to a parent element instead of individual child elements. It's beneficial when: \n1. You have many similar child elements that need the same event handler\n2. You're dynamically adding elements to the DOM\n3. You want to reduce the number of event listeners\n\nExample: Attaching a click event to a <ul> element to handle clicks on its <li> children, even if new <li> elements are added later.",,,,,Analyze,Conceptual,A,
Unit 5,Asynchronous JavaScript,5,Compare and contrast Promises and async/await in JavaScript. Include code examples and discuss error handling approaches.,"Promises and async/await are both used for handling asynchronous operations in JavaScript.\n\nPromises:\n- Use .then() and .catch() chains\n- Error handling with .catch() or second parameter of .then()\n- Example: fetch('/api/data').then(res => res.json()).catch(err => console.error(err));\n\nasync/await:\n- Syntactic sugar over Promises making code look synchronous\n- Error handling with try/catch blocks\n- Example: async function getData() { try { const res = await fetch('/api/data'); const data = await res.json(); return data; } catch (err) { console.error(err); } }\n\nAsync/await offers cleaner, more readable code especially for complex Promise chains, while Promises are more flexible for certain use cases like Promise.all().",,,,,Evaluate,Procedural,B,
Unit 1,Variables,1,Which keyword is used to declare a constant variable in JavaScript?,const,var,let,const,function,Remember,Factual,A,
Unit 2,Objects,2,Explain the concept of object destructuring in JavaScript with an example.,"Object destructuring is a JavaScript expression that allows extracting properties from objects and binding them to variables. Example: const person = { name: 'John', age: 30 }; const { name, age } = person; // name = 'John', age = 30",,,,,Understand,Conceptual,A,
Unit 3,Error Handling,3,Describe the purpose and implementation of try-catch blocks in JavaScript.,"Try-catch blocks are used to handle exceptions in JavaScript. The code in the try block is executed, and if it throws an exception, the catch block is executed with the exception as a parameter. This prevents the program from crashing and allows for graceful error handling and recovery.",,,,,Apply,Procedural,B,
Unit 4,Closures,4,Explain JavaScript closures and provide a practical example of their use.,"A closure is a function that has access to its own scope, the outer function's variables, and global variables even after the outer function has returned. Practical example: Creating private variables in a module pattern or implementing data encapsulation.",,,,,Analyze,Conceptual,A,
Unit 5,Web APIs,5,Evaluate the benefits and limitations of using the Fetch API compared to XMLHttpRequest for making HTTP requests.,"Benefits of Fetch API:\n- Promise-based, works well with async/await\n- Cleaner, more concise syntax\n- Built-in JSON parsing with .json() method\n- Better error handling with Promise chains\n\nLimitations of Fetch API:\n- Doesn't reject on HTTP error status (only on network failures)\n- No built-in timeout mechanism\n- No progress events for large downloads\n- Older browser compatibility issues\n\nXMLHttpRequest advantages:\n- Better browser compatibility\n- Supports upload progress events\n- Can abort requests easily\n\nFetch is generally preferred for modern applications due to its cleaner syntax and Promise-based nature, while XMLHttpRequest might be needed for specific use cases or legacy browser support.",,,,,Evaluate,Procedural,B,